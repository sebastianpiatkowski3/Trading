Skrót ORM oznacza Object-Relational Mapping. Jest to technika programowania, która umożliwia mapowanie obiektów języka programowania na struktury danych baz danych. ORM ułatwia pracę z bazami danych, eliminując konieczność bezpośredniego korzystania z zapytań SQL, a zamiast tego pozwala programistom operować na obiektach, co jest bardziej naturalne w kontekście programowania obiektowego.

W kontekście zadania, które opisałeś, dodanie obsługi bazy danych w module SQLAlchemy może obejmować użycie ORM do mapowania klas Pythona na tabele w bazie danych. To pozwoli na łatwe operowanie na danych firm, pracowników itp., korzystając z obiektów i metod, zamiast bezpośrednio manipulować danymi w bazie za pomocą zapytań SQL.

Dodatkowo, wymienione w zadaniu "Dołącz do repozytorium własne migracje" sugeruje, że oprócz samego kodu programu, należy również dołączyć skrypty migracji bazy danych. Skrypty migracji są narzędziem pomocnym przy ewoluowaniu struktury bazy danych w trakcie rozwoju aplikacji, pozwalając na dodawanie, usuwanie lub modyfikowanie tabel i kolumn.

Podsumowując, w kontekście zadania ORM i programu księgowego (accountant) oznaczałoby zastosowanie techniki Object-Relational Mapping do obsługi bazy danych, co pozwoli na przechowywanie danych w bazie danych zamiast w plikach.


Skrypty migracji bazy danych są narzędziem używanym w środowisku programistycznym do zarządzania ewolucją struktury bazy danych w trakcie rozwoju aplikacji. Kiedy rozwijasz aplikację i dokonujesz zmian w modelu danych (np. dodajesz nowe tabele, usuwasz kolumny, zmieniasz typy danych), skrypty migracji pomagają w wprowadzaniu tych zmian w bazie danych w sposób kontrolowany i śledzony.

Główne zadania skryptów migracji to:

1. **Tworzenie nowych tabel i kolumn**: Kiedy dodajesz nowe funkcje do swojej aplikacji, często musisz zaktualizować strukturę bazy danych, aby uwzględnić te nowości.

2. **Modyfikowanie istniejących tabel i kolumn**: Jeśli zachodzi potrzeba zmiany struktury już istniejących tabel lub kolumn, skrypty migracji pozwalają na bezpieczne dokonanie tych modyfikacji.

3. **Usuwanie tabel i kolumn**: Jeśli pewne elementy struktury bazy danych przestają być potrzebne, skrypty migracji umożliwiają ich usunięcie.

4. **Przenoszenie danych**: W niektórych przypadkach zmiany struktury bazy danych wymagają przeniesienia już istniejących danych do nowych struktur. Skrypty migracji mogą zawierać kody do przekształcania i przenoszenia danych.

W praktyce, frameworki ORM (takie jak SQLAlchemy) często dostarczają narzędzia do generowania i aplikowania skryptów migracji automatycznie. Programiści zazwyczaj tworzą nową migrację dla każdej zmiany w modelu danych, a te migracje są przechowywane w repozytorium kodu. To pozwala na śledzenie ewolucji struktury bazy danych w czasie i umożliwia łatwe dostosowanie bazy danych do nowych wymagań aplikacji.


W kontekście zadania, w którym dotychczas przechowujesz dane w trzech plikach tekstowych, implementacja ORM polegałaby na przeniesieniu tych danych do bazy danych przy użyciu mapowania obiektowo-relacyjnego. Tutaj jest, jak mógłbyś to zrealizować:

Definiowanie Klas: Dla każdego rodzaju danych, które przechowujesz (np. firmy, pracownicy, transakcje), utwórz klasę Pythona reprezentującą ten rodzaj danych. Każda klasa będzie mapowana na odpowiednią tabelę w bazie danych.

python
Copy code
from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Company(Base):
    __tablename__ = 'company'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    employees = relationship('Employee', back_populates='company')

class Employee(Base):
    __tablename__ = 'employee'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    company_id = Column(Integer, ForeignKey('company.id'))
    company = relationship('Company', back_populates='employees')

# Dodaj odpowiednie klasy dla innych rodzajów danych
Inicjalizacja Bazy Danych: Użyj SQLAlchemy do utworzenia bazy danych i tabel na podstawie zdefiniowanych klas.

python
Copy code
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

engine = create_engine('sqlite:///database.db')  # Możesz użyć innego silnika bazodanowego
Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()
Operacje CRUD przy użyciu ORM: Teraz możesz korzystać z klas i obiektów Pythona, aby wykonywać operacje na danych w bazie danych bezpośrednio, używając ORM. Na przykład:

python
Copy code
# Dodawanie nowej firmy
new_company = Company(name='ABC Corporation')
session.add(new_company)
session.commit()

# Pobieranie pracowników danej firmy
company = session.query(Company).filter_by(name='ABC Corporation').first()
employees = company.employees
Migracje: Jeśli w przyszłości dokonasz zmian w strukturze bazy danych, użyj skryptów migracji, aby zaktualizować bazę danych.

W ten sposób, zamiast operować na plikach tekstowych, będziesz operować na obiektach Pythona, a SQLAlchemy zajmie się mapowaniem tych obiektów na strukturę bazy danych. ORM pozwoli Ci na bardziej zwięzłe i zrozumiałe zarządzanie danymi w bazie danych przy użyciu obiektów i klas Pythona.
